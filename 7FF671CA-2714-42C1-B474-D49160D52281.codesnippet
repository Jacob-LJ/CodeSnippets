<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>jaCollectionViewVC_GT_SectionHeader</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//view
#import "GTShareItemCCell.h"
#import "GTTCSectionHeaderView.h"

static const NSInteger kListColumn = 3;

@interface GTTCSpecialOfferListController ()&lt;UICollectionViewDelegate, UICollectionViewDataSource&gt;

@property (nonatomic, assign) NSInteger page;

@end

@implementation GTTCSpecialOfferListController

- (instancetype)init {
    if (self = [super init]) {
        [self setUpFlowLayout];
    }
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self setUpInit];
    [self setUpNav];
    [self setUpCollectionView];
    
}

- (void)setUpFlowLayout {
    
    UICollectionViewFlowLayout *flowLayout = [[UICollectionViewFlowLayout alloc] init];
    //    flowLayout.itemSize = CGSizeMake(kScreenWidth / 2.0, 100);
    flowLayout.minimumInteritemSpacing = 0;
    flowLayout.minimumLineSpacing = 0;
    flowLayout.scrollDirection = UICollectionViewScrollDirectionVertical;
    self.layout = flowLayout;
}

- (void)setUpInit {
    self.page = 1;
}

- (void)setUpNav {
    self.navigationItem.title = @"特惠专区";
    kDefineWeakSelf;
    [self showCustomLeftImgBarButton:^(UIButton *button) {
        [weakSelf.navigationController popViewControllerAnimated:YES];
    }];
}

- (void)setUpCollectionView {
    
    self.collectionView.delegate = self;
    self.collectionView.dataSource = self;
    //    self.isShowEmptyView = YES; // base中的设置控制了 collectionView.backgroundColor 在 MyBaseEmptyCollectionViewViewController 的 - (BOOL)emptyDataSetShouldDisplay:(UIScrollView内 *)scrollView
    self.collectionView.backgroundColor = kColor_f6f6f6;
    self.collectionView.showsVerticalScrollIndicator  = NO;
    [self.view addSubview:self.collectionView];
    
    //register cell
    [self.collectionView registerClass:[GTShareItemCCell class] forCellWithReuseIdentifier:GTShareItemCCellID];
    //register section reuseview
    [self.collectionView registerNib:[UINib nibWithNibName:NSStringFromClass([GTTCSectionHeaderView class]) bundle:nil] forSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:GTTCSectionHeaderViewID];
    
    [self.collectionView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.edges.equalTo(self.view);
    }];
    
    kDefineWeakSelf;
    [self.collectionView Lee_normalHeaderRefreshWithBlock:^{
        [weakSelf getShopList];
    }];
    [self.collectionView Lee_normalFooterRefreshWithBlock:^{
        [weakSelf getMoreShoplist];
    }];
    
    [self.collectionView Lee_beginNormalHeaderRefresh];
}

#pragma mark - UICollectionViewDelegateFlowLayout
- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout*)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    UICollectionViewFlowLayout *layout = (UICollectionViewFlowLayout *)collectionViewLayout;
    CGFloat cellW = (collectionView.width - (kListColumn - 1) * layout.minimumInteritemSpacing) / kListColumn;
    return CGSizeMake(cellW, 100);
}

#pragma mark - UICollectionViewDelegate, UICollectionViewDataSource
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 2;
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    if (section == 0) {
        return 12;
    }
    return 4;
}

- (UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {
    GTShareItemCCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:GTShareItemCCellID forIndexPath:indexPath];
    cell.backgroundColor = [UIColor colorWithRed:arc4random() % 256 / 256.0 green:arc4random() % 256 / 256.0 blue:arc4random() % 256 / 256.0 alpha:1];
    return cell;
}

- (void)collectionView:(UICollectionView *)collectionView didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"点击了 - %@", indexPath);
}

- (CGSize)collectionView:(UICollectionView *)collectionView layout:(UICollectionViewLayout *)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section {
    
    return CGSizeMake(self.view.size.width, 40);
}


- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView viewForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath {
    
    UICollectionReusableView *reusableview = nil;
    if (kind == UICollectionElementKindSectionHeader) {
        GTTCSectionHeaderView *headerView = [collectionView dequeueReusableSupplementaryViewOfKind:UICollectionElementKindSectionHeader withReuseIdentifier:GTTCSectionHeaderViewID forIndexPath:indexPath];
        reusableview = headerView;
        if (indexPath.section == 0) {
            headerView.type = GTTCSectionHeaderViewTypeShowAll;
            headerView.titleLB.text = @"门店";
        } else if (indexPath.section == 1) {
            headerView.type = GTTCSectionHeaderViewTypeDefault;
            headerView.titleLB.text = @"类型";
        }
    }
    
    return reusableview;
}

#pragma mark - private

#pragma mark - networking
- (void)getShopList {
    [self getShoplistWithCategoryNo:@""];
}

- (void)getShoplistWithCategoryNo:(NSString *)categoryNo {
    //    self.page = 1;
    //
    //    NSDictionary *params = @{
    //                             @"categoryNo" : kStringNullToempty(categoryNo),
    //                             @"mallId" : kUserDefaultsGetMallId,
    //                             @"pageNo" : @(self.page),
    //                             @"pageSize" : @10,
    //                             };
    //
    //    [self.view showLoadingView];
    //    [GTDiscoveryNetWorking getDiscoveryShopListWithParams:params controller:nil completionHandler:^(GTDiscoveryShopListModel *responseObj, NSError *error, NSInteger statusCode) {
    //
    //        [self.view dismissLoadingView];
    //        if (error) {
    //            NSLog(@"%@", error);
    //            [self.view showMessageView:nil text:error.localizedDescription];
    //            self.isShowEmptyView = YES;
    //            self.collectionView.mj_footer.hidden = YES;
    //
    //        } else {
    //            //空状态处理
    //            if (!responseObj.records.count) {
    //                [self showEmptyView:YES];
    //                self.collectionView.mj_footer.hidden = YES;
    //            } else {
    //                [self showEmptyView:NO];
    //                self.collectionView.mj_footer.hidden = NO;
    //            }
    //        }
    //
    //        self.shopListModel = responseObj;
    //        [self.collectionView reloadData];
    //        [self.collectionView setContentOffset:CGPointZero animated:0];
    [self.collectionView Lee_endNormalFooterRefresh];
    [self.collectionView Lee_endNormalHeaderRefresh];
    //    }];
}

- (void)getMoreShoplist {
    
    //    self.page++;
    //    NSDictionary *params = @{
    //                             @"categoryNo" : kStringNullToempty(self.selectCategoryNo),
    //                             @"mallId" : kUserDefaultsGetMallId,
    //                             @"pageNo" : @(self.page),
    //                             @"pageSize" : @10,
    //                             };
    //
    //    [self.view showLoadingView];
    //    [GTDiscoveryNetWorking getDiscoveryShopListWithParams:params controller:nil completionHandler:^(GTDiscoveryShopListModel *responseObj, NSError *error, NSInteger statusCode) {
    //
    //        [self.view dismissLoadingView];
    //        if (error) {
    //            NSLog(@"%@", error);
    //            [self.view showMessageView:nil text:error.localizedDescription];
    //            self.isShowEmptyView = YES;
    //
    //        } else {
    //            //空状态处理
    //            if (!responseObj.records.count) {
    //                [self showEmptyView:YES];
    //            } else {
    //                [self showEmptyView:NO];
    //            }
    //
    //            if (responseObj.records.count) {
    //                NSMutableArray *arrayM = [NSMutableArray arrayWithCapacity:1];
    //                [arrayM addObjectsFromArray:self.shopListModel.records];
    //                [arrayM addObjectsFromArray:responseObj.records];
    //                self.shopListModel = responseObj;
    //                self.shopListModel.records = arrayM;
    //                [self.collectionView reloadData];
    [self.collectionView Lee_endNormalFooterRefresh];
    //            } else {
    //                [self.collectionView Lee_endNormalFooterRefreshWithNoMoreData];
    //            }
    //        }
    //
    //    }];
    
}

#pragma mark - empty action
- (void)showEmptyView:(BOOL)show {
    
    if (show) {
        self.isShowEmptyView = YES;
        self.tintStr = @"暂无店铺信息";
        //            self.tintImgName = @"general_message";
        //            self.tintBtnImgName = @"home_vote";
    } else {
        self.isShowEmptyView = NO;
    }
}

//点击图片
- (void)emptyDataSetImgDidTapNetWorking {
    [self.collectionView Lee_beginNormalHeaderRefresh];
}

//如果有按钮
- (void)emptyDataSetBtnDidTapNetWorking {
    NSLog(@"点击了空状态按钮事件");
}

@end
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>7FF671CA-2714-42C1-B474-D49160D52281</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>CollectionVC_GT_SectionHeader</string>
	<key>IDECodeSnippetTitle</key>
	<string>jaCollectionViewVC_GT</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
