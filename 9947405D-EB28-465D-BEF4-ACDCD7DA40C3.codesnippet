<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>jaDispatch_SerialConcurrentTaskManager</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event {
    
    //单个队列串行执行 多个任务
    //    [self singleQueueSerialExcute];
    
    //多个串行队列任务 同步执行
    //    [self mutiSerialQueueTaskSerialExcute];
    
    //多个请求并行执行后 汇总结束
    //    [self mutiRequestAsyncExcuteThenFinalInNotify];
    
    //通过信号量 处理 多个请求并行执行后 汇总结束
    [self semaphore_mutiRequestAsyncConcurrentExcuteThenFinalInNotify];
    
    //通过信号量 处理 多个请求 顺序执行
    [self semaphore_mutiRequestAsyncSerialExcuteThenFinalInNotify];
    
}

//单个队列串行执行 多个任务
- (void)singleQueueSerialExcute {
    
    dispatch_queue_t queue = dispatch_queue_create("queue", DISPATCH_QUEUE_SERIAL);
    
    dispatch_async(queue, ^{
        NSLog(@"in 1 %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:3.f];
        NSLog(@"out 1 %@",[NSThread currentThread]);
    });
    
    dispatch_async(queue, ^{
        NSLog(@"in 2 %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:1.f];
        NSLog(@"out 2 %@",[NSThread currentThread]);
    });
    
    dispatch_async(queue, ^{
        NSLog(@"in 3 %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:2.f];
        NSLog(@"out 3 %@",[NSThread currentThread]);
    });
    
    dispatch_async(queue, ^{
        NSLog(@"4 %@",[NSThread currentThread]);
    });
    
    /*
     2017-07-06 23:11:05.561 group[13900:422829] in 1 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:08.567 group[13900:422829] out 1 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:08.567 group[13900:422829] in 2 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:09.573 group[13900:422829] out 2 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:09.573 group[13900:422829] in 3 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:11.579 group[13900:422829] out 3 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     2017-07-06 23:11:11.579 group[13900:422829] 4 &lt;NSThread: 0x608000263080&gt;{number = 3, name = (null)}
     */
    
}

//多个串行队列任务 同步执行
- (void)mutiSerialQueueTaskSerialExcute {
    
    //dispatch_set_target_queue可以改变queue的优先级与目标queue相同
    //一般都是把一个任务放到一个串行的queue中，如果这个任务被拆分了，被放置到多个串行的queue中，但实际还是需要这个任务同步执行，就会有问题，因为多个串行queue之间是并行的。
    //如果将多个串行的queue使用dispatch_set_target_queue指定到了同一目标，那么这多个串行queue在目标queue上就是同步执行的，不再是并行执行。
    dispatch_queue_t targetQueue = dispatch_queue_create("test.target.queue", DISPATCH_QUEUE_SERIAL);
    
    dispatch_queue_t queue1 = dispatch_queue_create("test.1", DISPATCH_QUEUE_SERIAL);
    dispatch_queue_t queue2 = dispatch_queue_create("test.2", DISPATCH_QUEUE_SERIAL);
    dispatch_queue_t queue3 = dispatch_queue_create("test.3", DISPATCH_QUEUE_SERIAL);
    
    dispatch_set_target_queue(queue1, targetQueue);
    dispatch_set_target_queue(queue2, targetQueue);
    dispatch_set_target_queue(queue3, targetQueue);
    
    
    dispatch_async(queue1, ^{
        NSLog(@"1 in %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:3.f];
        NSLog(@"1 out %@",[NSThread currentThread]);
    });
    
    dispatch_async(queue2, ^{
        NSLog(@"2 in %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:2.f];
        NSLog(@"2 out %@",[NSThread currentThread]);
    });
    dispatch_async(queue3, ^{
        NSLog(@"3 in %@",[NSThread currentThread]);
        [NSThread sleepForTimeInterval:1.f];
        NSLog(@"3 out %@",[NSThread currentThread]);
    });
    
    /*
     2017-07-06 23:25:44.848 group[13979:437054] 1 in &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     2017-07-06 23:25:47.851 group[13979:437054] 1 out &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     2017-07-06 23:25:47.851 group[13979:437054] 2 in &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     2017-07-06 23:25:49.857 group[13979:437054] 2 out &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     2017-07-06 23:25:49.858 group[13979:437054] 3 in &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     2017-07-06 23:25:50.861 group[13979:437054] 3 out &lt;NSThread: 0x608000076100&gt;{number = 3, name = (null)}
     */
    
}

//多个请求并行执行后 汇总结束
- (void)mutiRequestAsyncExcuteThenFinalInNotify {
    //多个请求并行执行后 汇总结束
    dispatch_group_t group = dispatch_group_create();
    
    dispatch_queue_t queue = dispatch_queue_create("queue", DISPATCH_QUEUE_SERIAL);//使用 queue 是用来模拟的
    
    //使用 queue 模拟 异步的（dispatch_group_async）/ 延迟的（dispatch_after） 网络请求，响应完成时即回到主线程（dispatch_get_main_queue）执行 block
    /*
     dispatch_group_enter(serviceGroup);
     [ConfigService startWithCompletion:^(ConfigResponse *results, NSError* error){
     dispatch_group_leave(serviceGroup);
     }];
     */
    dispatch_group_enter(group);
    dispatch_group_async(group, queue, ^{
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSLog(@"任务1 %@",[NSThread currentThread]);
            dispatch_group_leave(group);
        });
    });
    
    dispatch_group_enter(group);
    dispatch_group_async(group, queue, ^{
        NSLog(@"任务2 %@",[NSThread currentThread]);
        dispatch_group_leave(group);
    });
    
    dispatch_group_enter(group);
    dispatch_group_async(group, queue, ^{
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSLog(@"任务3 %@",[NSThread currentThread]);
            dispatch_group_leave(group);
        });
    });
    
    dispatch_queue_t notifyQueue = dispatch_get_main_queue(); //执行完所有任务成后 返回去主线程
    dispatch_group_notify(group, notifyQueue, ^{
        NSLog(@"完成 %@",[NSThread currentThread]);
    });
    
    /*
     2017-07-06 23:26:28.858 group[13999:437939] 任务2 &lt;NSThread: 0x60000007a1c0&gt;{number = 4, name = (null)}
     2017-07-06 23:26:29.857 group[13999:437888] 任务1 &lt;NSThread: 0x608000073640&gt;{number = 1, name = main}
     2017-07-06 23:26:31.048 group[13999:437888] 任务3 &lt;NSThread: 0x608000073640&gt;{number = 1, name = main}
     2017-07-06 23:26:31.048 group[13999:437888] 完成 &lt;NSThread: 0x608000073640&gt;{number = 1, name = main}
     */
}

//通过信号量 处理 多个请求并行执行后 汇总结束
- (void)semaphore_mutiRequestAsyncConcurrentExcuteThenFinalInNotify {
    //http://www.jianshu.com/p/56313152e87e
    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_group_t group = dispatch_group_create();
    dispatch_semaphore_t sem = dispatch_semaphore_create(0);
    dispatch_group_async(group, queue, ^{
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            dispatch_semaphore_signal(sem);
            NSLog(@"请求一");
        });
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
    });
    dispatch_group_async(group, queue, ^{
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.8 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            dispatch_semaphore_signal(sem);
            NSLog(@"请求二");
        });
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
    });
    
    dispatch_group_async(group, queue, ^{
        NSLog(@"请求三");
        
    });
    //在分组的所有任务完成后触发
    dispatch_group_notify(group, queue, ^{
        
        NSLog(@"请求完成");
    });
}

//通过信号量 处理 多个请求 顺序执行
- (void)semaphore_mutiRequestAsyncSerialExcuteThenFinalInNotify {
    //http://www.jianshu.com/p/56313152e87e
    dispatch_semaphore_t sem = dispatch_semaphore_create(1);
    dispatch_queue_t queue = dispatch_queue_create("testBlock", NULL);
    dispatch_async(queue, ^{
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSLog(@"1");
            dispatch_semaphore_signal(sem);
            
        });
    });
    dispatch_async(queue, ^{
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
        NSLog(@"2");
        dispatch_semaphore_signal(sem);
    });
    dispatch_async(queue, ^{
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            NSLog(@"3");
            dispatch_semaphore_signal(sem);
            
        });
    });
    dispatch_async(queue, ^{
        dispatch_semaphore_wait(sem, DISPATCH_TIME_FOREVER);
        NSLog(@"4");
        dispatch_semaphore_signal(sem);
        
    });
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>9947405D-EB28-465D-BEF4-ACDCD7DA40C3</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetSummary</key>
	<string>串行、并行多任务管理汇总</string>
	<key>IDECodeSnippetTitle</key>
	<string>jaDispatch_SerialConcurrentMutiTaskManager</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
