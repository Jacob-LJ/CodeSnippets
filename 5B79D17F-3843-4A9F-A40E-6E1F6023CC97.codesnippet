<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>jaTextView_FlowUpByKeyboardController</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//.h
#import "HLMBaseViewController.h"

@interface WIFriendsBlessingHostReplyController : HLMBaseViewController

@property (nonatomic, copy) void(^replyActionBlock)(NSString *inputStr);

- (void)show;

@end

//.m
#import "WIFriendsBlessingHostReplyController.h"
//view
#import "HLMEmotionInputView.h"
//category
#import "UIView+Frame.h"
//util
#import "HLMButton.h"
//lib
#import "YYText.h"
#import &lt;SVProgressHUD.h&gt;

@interface WIFriendsBlessingHostReplyController () &lt;YYTextViewDelegate&gt;

@property (nonatomic, strong) HLMEmotionInputView *emojiListView;
@property (weak, nonatomic) IBOutlet UIView *backView;
@property (weak, nonatomic) IBOutlet YYTextView *textView;
@property (weak, nonatomic) IBOutlet HLMButton *emojiButton;
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *bottomLayout; //SuperActionView
@property (weak, nonatomic) IBOutlet NSLayoutConstraint *textHeightLayout; //ActionView 的高度

@end

@implementation WIFriendsBlessingHostReplyController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    [self setUpInit];
    [self setUpTextView];
}

- (void)setUpInit {
    
    self.view.frame = CGRectMake(0, 0, HLMScreenW, HLMScreenH);
    [self.backView addGestureRecognizer:[[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapBackView)]];
    self.automaticallyAdjustsScrollViewInsets = NO;
    
    [self.emojiButton setImage:[UIImage imageNamed:@"weddingDiary_emoji"] forState:UIControlStateNormal]; //切换表情
    [self.emojiButton setImage:[UIImage imageNamed:@"weddingDiary_keyboard"] forState:UIControlStateSelected]; //切换键盘
    [self.emojiButton addTarget:self action:@selector(emojiClick:) forControlEvents:UIControlEventTouchUpInside];
}

- (void)setUpTextView {
    
    YYTextView *textView = self.textView;
    textView.delegate = self;
    textView.keyboardDismissMode = UIScrollViewKeyboardDismissModeNone;
    textView.textContainerInset = UIEdgeInsetsMake(15, 0, 15, 15);
    textView.font = [UIFont systemFontOfSize:14];
    textView.textColor = RGBA(61, 61, 61, 1);
    textView.returnKeyType = UIReturnKeySend;
    
    YYTextLinePositionSimpleModifier *modefier = [[YYTextLinePositionSimpleModifier alloc] init];
    modefier.fixedLineHeight = 20;
    textView.linePositionModifier = modefier;
    [self setTextViewPlaceHolderStr];
    
}

- (void)setTextViewPlaceHolderStr {
    NSString *placeHolderStr = @"回复";
    placeHolderStr = [NSString stringWithFormat:@"回复 %@",@"xxxx"];
    NSDictionary *attributes = @{
                                 NSFontAttributeName : [UIFont systemFontOfSize:14],
                                 NSForegroundColorAttributeName : RGBA(204, 204, 204, 1)
                                 };
    self.textView.placeholderAttributedText = [[NSAttributedString alloc] initWithString:placeHolderStr attributes:attributes];
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

#pragma mark - UIKeyboardWillChangeFrameNotification

- (void)keyboardFrameWillChange:(NSNotification *)noti {
    
    CGRect endFrame = [noti.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue];
    CGFloat animateTime = [noti.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
    
    CGFloat keboardHeight = HLMScreenH - endFrame.origin.y;
    
    self.bottomLayout.constant = keboardHeight;
    
    [UIView animateWithDuration:animateTime animations:^{
        [self.view layoutIfNeeded];
    }];
}

static NSInteger _maxWordNumber = 140;
#pragma mark - YYTextViewDelegate

- (void)textViewDidChange:(YYTextView *)textView {
    
    //限制字数
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        NSString *toBeString = textView.text;
        UITextRange *selectedRange = [textView markedTextRange];//获取高亮部分
        UITextPosition *position = [textView positionFromPosition:selectedRange.start offset:0];
        if (!position) { // 没有高亮选择的字，则对已输入的文字进行字数统计和限制
            if (toBeString.length &gt; _maxWordNumber) {
                NSRange rangeIndex = [toBeString rangeOfComposedCharacterSequenceAtIndex:_maxWordNumber];
                [SVProgressHUD showInfoWithStatus:[NSString stringWithFormat:@"字数不能超过%ld", _maxWordNumber]];
                if (rangeIndex.length == 1) {
                    textView.text = [toBeString substringToIndex:_maxWordNumber];
                } else {
                    NSRange rangeRange = [toBeString rangeOfComposedCharacterSequencesForRange:NSMakeRange(0, _maxWordNumber)];
                    textView.text = [toBeString substringWithRange:rangeRange];
                }
            }
        }
    });
    
    
    CGFloat height = textView.contentSize.height;
    
    if (height == textView.hlm_height) return;
    
    self.textHeightLayout.constant = height;
    
    [UIView animateWithDuration:0.2 animations:^{
        [self.view layoutIfNeeded];
    }];
}

//回车发送
- (BOOL)textView:(YYTextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
    
    if ([text isEqualToString:@"\n"]) {
        [self performCommentAction];
        [self.view endEditing:YES];
        return NO;
    }
    return YES;
}

#pragma mark - public method

- (void)show {
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardFrameWillChange:) name:UIKeyboardWillChangeFrameNotification object:nil];
    
    [[UIApplication sharedApplication].keyWindow addSubview:self.view];
    self.view.alpha = 0;
    
    [UIView animateWithDuration:0.1 animations:^{
        
        self.view.alpha = 1;
        
    } completion:^(BOOL finished) {
        [self.textView becomeFirstResponder];
    }];
}

#pragma mark - private method

- (void)dismissCompleted:(void(^)())completedBlock {
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    
    [UIView animateWithDuration:0.1 animations:^{
        
        self.view.alpha = 0;
        
    } completion:^(BOOL finished) {
        
        if (completedBlock) {
            completedBlock();
        }
        
        self.bottomLayout.constant = 0;
        [self.view layoutIfNeeded];
        
        self.textView.text = @"";
        
        [self.view removeFromSuperview];
        [self removeFromParentViewController];
    }];
    
}

#pragma mark - event

- (void)emojiClick:(UIButton *)sender {
    
    sender.selected = !sender.isSelected;
    
    if (self.textView.inputView) {
        
        self.textView.inputView = nil;
        [self.textView reloadInputViews];
        [self.textView becomeFirstResponder];
        
    } else {
        
        self.textView.inputView = self.emojiListView;
        [self.textView reloadInputViews];
        [self.textView becomeFirstResponder];
    }
    
    
}

- (void)tapEmotionText:(NSString *)emotionText {
    if (emotionText.length) {
        [_textView replaceRange:self.textView.selectedTextRange withText:emotionText];
    }
}

- (void)tapDelete {
    [self.textView deleteBackward];
}

- (void)tapBackView {
    [self dismissCompleted:nil];
}

#pragma mark -
- (void)performCommentAction {
    
}

#pragma mark - getter &amp; setter
- (HLMEmotionInputView *)emojiListView {
    if (!_emojiListView) {
        _emojiListView = [[HLMEmotionInputView alloc] initWithFrame:CGRectMake(0, 0, 100, 100)];
        HLMWeakSelf
        _emojiListView.tapEmotionClick = ^(NSString *emotion){
            [weakSelf tapEmotionText:emotion];
        };
        _emojiListView.tapDeleteClick = ^{
            [weakSelf tapDelete];
        };
        
    }
    return _emojiListView;
}


@end

</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>5B79D17F-3843-4A9F-A40E-6E1F6023CC97</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C-Plus-Plus</string>
	<key>IDECodeSnippetSummary</key>
	<string>TextView回复控制器</string>
	<key>IDECodeSnippetTitle</key>
	<string>jaTextView_FlowUpByKeyboardController</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
